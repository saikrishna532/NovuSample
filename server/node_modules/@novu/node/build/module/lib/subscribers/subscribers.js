import { WithHttp } from '../novu.interface';
export class Subscribers extends WithHttp {
    async list(page = 0, limit = 10) {
        return await this.http.get(`/subscribers`, {
            params: {
                page,
                limit,
            },
        });
    }
    async get(subscriberId) {
        return await this.http.get(`/subscribers/${subscriberId}`);
    }
    async identify(subscriberId, data) {
        return await this.http.post(`/subscribers`, {
            subscriberId,
            ...data,
        });
    }
    async bulkCreate(subscribers) {
        return await this.http.post(`/subscribers/bulk`, {
            subscribers,
        });
    }
    async update(subscriberId, data) {
        return await this.http.put(`/subscribers/${subscriberId}`, {
            ...data,
        });
    }
    async setCredentials(subscriberId, providerId, credentials) {
        return await this.http.put(`/subscribers/${subscriberId}/credentials`, {
            providerId,
            credentials: {
                ...credentials,
            },
        });
    }
    async deleteCredentials(subscriberId, providerId) {
        return await this.http.delete(`/subscribers/${subscriberId}/credentials/${providerId}`);
    }
    async unsetCredentials(subscriberId, providerId) {
        return await this.http.put(`/subscribers/${subscriberId}/credentials`, {
            providerId,
            credentials: { webhookUrl: undefined, deviceTokens: [] },
        });
    }
    async updateOnlineStatus(subscriberId, online) {
        return await this.http.patch(`/subscribers/${subscriberId}/online-status`, {
            online,
        });
    }
    async delete(subscriberId) {
        return await this.http.delete(`/subscribers/${subscriberId}`);
    }
    async getPreference(subscriberId) {
        return await this.http.get(`/subscribers/${subscriberId}/preferences`);
    }
    async updatePreference(subscriberId, templateId, data) {
        return await this.http.patch(`/subscribers/${subscriberId}/preferences/${templateId}`, {
            ...data,
        });
    }
    async getNotificationsFeed(subscriberId, { payload, ...rest } = {}) {
        const payloadString = payload
            ? Buffer.from(JSON.stringify(payload)).toString('base64')
            : undefined;
        return await this.http.get(`/subscribers/${subscriberId}/notifications/feed`, {
            params: {
                payload: payloadString,
                ...rest,
            },
        });
    }
    async getUnseenCount(subscriberId, seen) {
        return await this.http.get(`/subscribers/${subscriberId}/notifications/unseen`, {
            params: {
                seen,
            },
        });
    }
    async markMessageSeen(subscriberId, messageId) {
        return await this.http.post(`/subscribers/${subscriberId}/messages/markAs`, {
            messageId,
            mark: { seen: true },
        });
    }
    async markMessageRead(subscriberId, messageId) {
        return await this.http.post(`/subscribers/${subscriberId}/messages/markAs`, {
            messageId,
            mark: { read: true },
        });
    }
    async markMessageAs(subscriberId, messageId, mark) {
        return await this.http.post(`/subscribers/${subscriberId}/messages/markAs`, {
            messageId,
            mark,
        });
    }
    async markAllMessagesAs(subscriberId, markAs, feedIdentifier) {
        return await this.http.post(`/subscribers/${subscriberId}/messages/mark-all`, { markAs, feedIdentifier });
    }
    async markMessageActionSeen(subscriberId, messageId, type, data) {
        return await this.http.post(`/subscribers/${subscriberId}/messages/${messageId}/actions/${type}`, {
            status: data.status,
            ...(data?.payload && { payload: data.payload }),
        });
    }
}
