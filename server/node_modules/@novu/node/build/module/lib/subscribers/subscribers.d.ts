import { AxiosResponse } from 'axios';
import { ButtonTypeEnum, IChannelCredentials, ISubscribersDefine } from '@novu/shared';
import { MarkMessagesAsEnum } from '@novu/shared';
import { IGetSubscriberNotificationFeedParams, IMarkFields, IMarkMessageActionFields, ISubscriberPayload, ISubscribers, IUpdateSubscriberPreferencePayload } from './subscriber.interface';
import { WithHttp } from '../novu.interface';
export declare class Subscribers extends WithHttp implements ISubscribers {
    list(page?: number, limit?: number): Promise<AxiosResponse<any, any>>;
    get(subscriberId: string): Promise<AxiosResponse<any, any>>;
    identify(subscriberId: string, data: ISubscriberPayload): Promise<AxiosResponse<any, any>>;
    bulkCreate(subscribers: ISubscribersDefine[]): Promise<AxiosResponse<any, any>>;
    update(subscriberId: string, data: ISubscriberPayload): Promise<AxiosResponse<any, any>>;
    setCredentials(subscriberId: string, providerId: string, credentials: IChannelCredentials): Promise<AxiosResponse<any, any>>;
    deleteCredentials(subscriberId: string, providerId: string): Promise<AxiosResponse<any, any>>;
    unsetCredentials(subscriberId: string, providerId: string): Promise<AxiosResponse<any, any>>;
    updateOnlineStatus(subscriberId: string, online: boolean): Promise<AxiosResponse<any, any>>;
    delete(subscriberId: string): Promise<AxiosResponse<any, any>>;
    getPreference(subscriberId: string): Promise<AxiosResponse<any, any>>;
    updatePreference(subscriberId: string, templateId: string, data: IUpdateSubscriberPreferencePayload): Promise<AxiosResponse<any, any>>;
    getNotificationsFeed(subscriberId: string, { payload, ...rest }?: IGetSubscriberNotificationFeedParams): Promise<AxiosResponse<any, any>>;
    getUnseenCount(subscriberId: string, seen: boolean): Promise<AxiosResponse<any, any>>;
    markMessageSeen(subscriberId: string, messageId: string): Promise<AxiosResponse<any, any>>;
    markMessageRead(subscriberId: string, messageId: string): Promise<AxiosResponse<any, any>>;
    markMessageAs(subscriberId: string, messageId: string, mark: IMarkFields): Promise<AxiosResponse<any, any>>;
    markAllMessagesAs(subscriberId: string, markAs: MarkMessagesAsEnum, feedIdentifier?: string | string[]): Promise<AxiosResponse<{
        data: number;
    }>>;
    markMessageActionSeen(subscriberId: string, messageId: string, type: ButtonTypeEnum, data: IMarkMessageActionFields): Promise<AxiosResponse<any, any>>;
}
//# sourceMappingURL=subscribers.d.ts.map