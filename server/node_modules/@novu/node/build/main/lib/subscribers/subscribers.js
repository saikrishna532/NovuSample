"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscribers = void 0;
var novu_interface_1 = require("../novu.interface");
var Subscribers = (function (_super) {
    __extends(Subscribers, _super);
    function Subscribers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Subscribers.prototype.list = function (page, limit) {
        if (page === void 0) { page = 0; }
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.get("/subscribers", {
                            params: {
                                page: page,
                                limit: limit,
                            },
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.get = function (subscriberId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.get("/subscribers/".concat(subscriberId))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.identify = function (subscriberId, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers", __assign({ subscriberId: subscriberId }, data))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.bulkCreate = function (subscribers) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/bulk", {
                            subscribers: subscribers,
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.update = function (subscriberId, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.put("/subscribers/".concat(subscriberId), __assign({}, data))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.setCredentials = function (subscriberId, providerId, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.put("/subscribers/".concat(subscriberId, "/credentials"), {
                            providerId: providerId,
                            credentials: __assign({}, credentials),
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.deleteCredentials = function (subscriberId, providerId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.delete("/subscribers/".concat(subscriberId, "/credentials/").concat(providerId))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.unsetCredentials = function (subscriberId, providerId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.put("/subscribers/".concat(subscriberId, "/credentials"), {
                            providerId: providerId,
                            credentials: { webhookUrl: undefined, deviceTokens: [] },
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.updateOnlineStatus = function (subscriberId, online) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.patch("/subscribers/".concat(subscriberId, "/online-status"), {
                            online: online,
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.delete = function (subscriberId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.delete("/subscribers/".concat(subscriberId))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.getPreference = function (subscriberId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.get("/subscribers/".concat(subscriberId, "/preferences"))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.updatePreference = function (subscriberId, templateId, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.patch("/subscribers/".concat(subscriberId, "/preferences/").concat(templateId), __assign({}, data))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.getNotificationsFeed = function (subscriberId, _a) {
        if (_a === void 0) { _a = {}; }
        var payload = _a.payload, rest = __rest(_a, ["payload"]);
        return __awaiter(this, void 0, void 0, function () {
            var payloadString;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        payloadString = payload
                            ? Buffer.from(JSON.stringify(payload)).toString('base64')
                            : undefined;
                        return [4, this.http.get("/subscribers/".concat(subscriberId, "/notifications/feed"), {
                                params: __assign({ payload: payloadString }, rest),
                            })];
                    case 1: return [2, _b.sent()];
                }
            });
        });
    };
    Subscribers.prototype.getUnseenCount = function (subscriberId, seen) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.get("/subscribers/".concat(subscriberId, "/notifications/unseen"), {
                            params: {
                                seen: seen,
                            },
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.markMessageSeen = function (subscriberId, messageId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/".concat(subscriberId, "/messages/markAs"), {
                            messageId: messageId,
                            mark: { seen: true },
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.markMessageRead = function (subscriberId, messageId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/".concat(subscriberId, "/messages/markAs"), {
                            messageId: messageId,
                            mark: { read: true },
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.markMessageAs = function (subscriberId, messageId, mark) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/".concat(subscriberId, "/messages/markAs"), {
                            messageId: messageId,
                            mark: mark,
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.markAllMessagesAs = function (subscriberId, markAs, feedIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/".concat(subscriberId, "/messages/mark-all"), { markAs: markAs, feedIdentifier: feedIdentifier })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Subscribers.prototype.markMessageActionSeen = function (subscriberId, messageId, type, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.http.post("/subscribers/".concat(subscriberId, "/messages/").concat(messageId, "/actions/").concat(type), __assign({ status: data.status }, ((data === null || data === void 0 ? void 0 : data.payload) && { payload: data.payload })))];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    return Subscribers;
}(novu_interface_1.WithHttp));
exports.Subscribers = Subscribers;
